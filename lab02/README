Sinjun Jang (srjang)
No special instructions.
N/A


1. a) char *cp;
   b) char arr[];
      char *ap = arr;
   c) int *pp;

2. A pointer can point to its own memory address. To do so you initialize it lie this.

int *a = &a;

3. The fundamental problem with this code is the pointer is not being dereferenced when comparing it to '\0'. When this code is executed, it will continue outputting characrers until the pointer runs out of memory. To fix this, change the code to say "*p != '\0'" instead of "p != '\0'".

4. a) Arrays are the same as pointers in the same way you can access elements of an array by incrementing both the array or pointer.
   b) What makes pointers different from arrays is that they point to the address of elements, not the element itself. In addition, you can also dynamically allocate memory to pointers, while you can't with arrays.

5. The perror argument is defined with the ISO C attribute const so that the function change the the argument placed in the function. This means that a string literal can be passed into the argument and the user doesn't need to worry if the value will be changed. The integer argument sterror is not defined with const because the value for strerror is usually the errno value and maps the argument into an error message string.

6. In 68 years from now, the clock will overflow in the year 2087. You can extend the overflow point by allocating more memory to location in question. In this case of having a 32-bit integer point overflow, one can add another 32-bit integer to keep track of calendar time when the first integer is about to overflow.

7. size_t is an unsigned integer type and it is located in the header file stdio.h
